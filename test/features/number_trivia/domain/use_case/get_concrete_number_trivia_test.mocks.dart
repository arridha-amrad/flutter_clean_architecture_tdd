// Mocks generated by Mockito 5.0.1 from annotations
// in clean_architecture_tdd/test/features/number_trivia/domain/use_case/get_concrete_number_trivia_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:clean_architecture_tdd/core/error/failures.dart' as _i5;
import 'package:clean_architecture_tdd/features/number_trivia/domain/entities/number_trivia.dart'
    as _i6;
import 'package:clean_architecture_tdd/features/number_trivia/domain/repositories/num_trivia_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [NumberTriviaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRepository extends _i1.Mock
    implements _i3.NumberTriviaRepository {
  MockNumberTriviaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.NumberTrivia>> getConcreteNumber(
          int? number) =>
      (super.noSuchMethod(Invocation.method(#getConcreteNumber, [number]),
              returnValue:
                  Future.value(_FakeEither<_i5.Failure, _i6.NumberTrivia>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.NumberTrivia>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.NumberTrivia>> getRandomNumber() =>
      (super.noSuchMethod(Invocation.method(#getRandomNumber, []),
              returnValue:
                  Future.value(_FakeEither<_i5.Failure, _i6.NumberTrivia>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.NumberTrivia>>);
}
